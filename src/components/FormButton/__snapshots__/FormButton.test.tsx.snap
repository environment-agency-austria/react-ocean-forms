// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FormButton /> render custom component should render the custom component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FormButton
    component="div"
    context={
      Object {
        "asyncValidateOnChange": false,
        "asyncValidationWait": 400,
        "busy": false,
        "defaultValues": Object {},
        "disabled": false,
        "fieldPrefix": null,
        "getFieldState": [MockFunction],
        "getValues": [MockFunction],
        "notifyFieldEvent": [MockFunction],
        "plaintext": false,
        "registerField": [MockFunction],
        "registerListener": [MockFunction],
        "stringFormatter": [MockFunction],
        "submit": [MockFunction],
        "unregisterField": [MockFunction],
        "unregisterListener": [MockFunction],
      }
    }
    disabled={false}
    onClick={[Function]}
    type="submit"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "disabled": false,
      "onClick": [Function],
      "type": "submit",
    },
    "ref": null,
    "rendered": null,
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "disabled": false,
        "onClick": [Function],
        "type": "submit",
      },
      "ref": null,
      "rendered": null,
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<FormButton /> render should render without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FormButton
    component="button"
    context={
      Object {
        "asyncValidateOnChange": false,
        "asyncValidationWait": 400,
        "busy": false,
        "defaultValues": Object {},
        "disabled": false,
        "fieldPrefix": null,
        "getFieldState": [MockFunction],
        "getValues": [MockFunction],
        "notifyFieldEvent": [MockFunction],
        "plaintext": false,
        "registerField": [MockFunction],
        "registerListener": [MockFunction],
        "stringFormatter": [MockFunction],
        "submit": [MockFunction],
        "unregisterField": [MockFunction],
        "unregisterListener": [MockFunction],
      }
    }
    disabled={false}
    onClick={[Function]}
    type="submit"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "disabled": false,
      "onClick": [Function],
      "type": "submit",
    },
    "ref": null,
    "rendered": null,
    "type": "button",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "disabled": false,
        "onClick": [Function],
        "type": "submit",
      },
      "ref": null,
      "rendered": null,
      "type": "button",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
