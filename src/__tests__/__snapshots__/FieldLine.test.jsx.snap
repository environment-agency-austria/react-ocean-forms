// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FieldLine /> should display invalid correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FieldLine
    field={
      Object {
        "disabled": false,
        "id": "unitInput",
        "name": "unitInput",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      }
    }
    id="unitInput"
    label="unitLabel"
    meta={
      Object {
        "error": null,
        "isValidating": false,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "unitLabel",
            ],
            Array [
              "unitLabel",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
        "touched": false,
        "valid": false,
      }
    }
  >
    <div>
      children
    </div>
  </FieldLine>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          className="text-right"
          htmlFor="unitInput"
        />,
        <div
          className="input-container"
        >
          <div>
            children
          </div>
          <FieldError
            error={null}
            id="unitInput_errors"
            invalid={true}
            stringFormatter={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "unitLabel",
                  ],
                  Array [
                    "unitLabel",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          />
        </div>,
      ],
      "className": "field-group is-invalid",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            undefined,
            null,
          ],
          "className": "text-right",
          "htmlFor": "unitInput",
        },
        "ref": null,
        "rendered": Array [
          undefined,
          null,
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              children
            </div>,
            <FieldError
              error={null}
              id="unitInput_errors"
              invalid={true}
              stringFormatter={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "unitLabel",
                    ],
                    Array [
                      "unitLabel",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            />,
          ],
          "className": "input-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "children",
            },
            "ref": null,
            "rendered": "children",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "error": null,
              "id": "unitInput_errors",
              "invalid": true,
              "stringFormatter": [MockFunction] {
                "calls": Array [
                  Array [
                    "unitLabel",
                  ],
                  Array [
                    "unitLabel",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            className="text-right"
            htmlFor="unitInput"
          />,
          <div
            className="input-container"
          >
            <div>
              children
            </div>
            <FieldError
              error={null}
              id="unitInput_errors"
              invalid={true}
              stringFormatter={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "unitLabel",
                    ],
                    Array [
                      "unitLabel",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            />
          </div>,
        ],
        "className": "field-group is-invalid",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              null,
            ],
            "className": "text-right",
            "htmlFor": "unitInput",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            null,
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                children
              </div>,
              <FieldError
                error={null}
                id="unitInput_errors"
                invalid={true}
                stringFormatter={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        "unitLabel",
                      ],
                      Array [
                        "unitLabel",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                    ],
                  }
                }
              />,
            ],
            "className": "input-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "children",
              },
              "ref": null,
              "rendered": "children",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "error": null,
                "id": "unitInput_errors",
                "invalid": true,
                "stringFormatter": [MockFunction] {
                  "calls": Array [
                    Array [
                      "unitLabel",
                    ],
                    Array [
                      "unitLabel",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<FieldLine /> should render without crashing 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FieldLine
    field={
      Object {
        "disabled": false,
        "id": "unitInput",
        "name": "unitInput",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      }
    }
    id="unitInput"
    label="unitLabel"
    meta={
      Object {
        "error": null,
        "isValidating": false,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "unitLabel",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
        "touched": false,
        "valid": true,
      }
    }
  >
    <div>
      children
    </div>
  </FieldLine>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          className="text-right"
          htmlFor="unitInput"
        />,
        <div
          className="input-container"
        >
          <div>
            children
          </div>
          <FieldError
            error={null}
            id="unitInput_errors"
            invalid={false}
            stringFormatter={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "unitLabel",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          />
        </div>,
      ],
      "className": "field-group",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            undefined,
            null,
          ],
          "className": "text-right",
          "htmlFor": "unitInput",
        },
        "ref": null,
        "rendered": Array [
          undefined,
          null,
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              children
            </div>,
            <FieldError
              error={null}
              id="unitInput_errors"
              invalid={false}
              stringFormatter={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "unitLabel",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            />,
          ],
          "className": "input-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "children",
            },
            "ref": null,
            "rendered": "children",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "error": null,
              "id": "unitInput_errors",
              "invalid": false,
              "stringFormatter": [MockFunction] {
                "calls": Array [
                  Array [
                    "unitLabel",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            className="text-right"
            htmlFor="unitInput"
          />,
          <div
            className="input-container"
          >
            <div>
              children
            </div>
            <FieldError
              error={null}
              id="unitInput_errors"
              invalid={false}
              stringFormatter={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "unitLabel",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            />
          </div>,
        ],
        "className": "field-group",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              null,
            ],
            "className": "text-right",
            "htmlFor": "unitInput",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            null,
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                children
              </div>,
              <FieldError
                error={null}
                id="unitInput_errors"
                invalid={false}
                stringFormatter={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        "unitLabel",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                    ],
                  }
                }
              />,
            ],
            "className": "input-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "children",
              },
              "ref": null,
              "rendered": "children",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "error": null,
                "id": "unitInput_errors",
                "invalid": false,
                "stringFormatter": [MockFunction] {
                  "calls": Array [
                    Array [
                      "unitLabel",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<FieldLine /> should show a required marker 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FieldLine
    field={
      Object {
        "disabled": false,
        "id": "unitInput",
        "name": "unitInput",
        "onBlur": [MockFunction],
        "onChange": [MockFunction],
        "value": "",
      }
    }
    id="unitInput"
    label="unitLabel"
    meta={
      Object {
        "error": null,
        "isValidating": false,
        "stringFormatter": [MockFunction] {
          "calls": Array [
            Array [
              "unitLabel",
            ],
            Array [
              "unitLabel",
            ],
            Array [
              "unitLabel",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
        "touched": false,
        "valid": false,
      }
    }
    validators={
      Array [
        [Function],
      ]
    }
  >
    <div>
      children
    </div>
  </FieldLine>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <label
          className="text-right"
          htmlFor="unitInput"
        >
          <span
            className="field-required"
          >
             *
          </span>
        </label>,
        <div
          className="input-container"
        >
          <div>
            children
          </div>
          <FieldError
            error={null}
            id="unitInput_errors"
            invalid={true}
            stringFormatter={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "unitLabel",
                  ],
                  Array [
                    "unitLabel",
                  ],
                  Array [
                    "unitLabel",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          />
        </div>,
      ],
      "className": "field-group is-invalid",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            undefined,
            <span
              className="field-required"
            >
               *
            </span>,
          ],
          "className": "text-right",
          "htmlFor": "unitInput",
        },
        "ref": null,
        "rendered": Array [
          undefined,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": " *",
              "className": "field-required",
            },
            "ref": null,
            "rendered": " *",
            "type": "span",
          },
        ],
        "type": "label",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div>
              children
            </div>,
            <FieldError
              error={null}
              id="unitInput_errors"
              invalid={true}
              stringFormatter={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "unitLabel",
                    ],
                    Array [
                      "unitLabel",
                    ],
                    Array [
                      "unitLabel",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            />,
          ],
          "className": "input-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "children",
            },
            "ref": null,
            "rendered": "children",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "error": null,
              "id": "unitInput_errors",
              "invalid": true,
              "stringFormatter": [MockFunction] {
                "calls": Array [
                  Array [
                    "unitLabel",
                  ],
                  Array [
                    "unitLabel",
                  ],
                  Array [
                    "unitLabel",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <label
            className="text-right"
            htmlFor="unitInput"
          >
            <span
              className="field-required"
            >
               *
            </span>
          </label>,
          <div
            className="input-container"
          >
            <div>
              children
            </div>
            <FieldError
              error={null}
              id="unitInput_errors"
              invalid={true}
              stringFormatter={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "unitLabel",
                    ],
                    Array [
                      "unitLabel",
                    ],
                    Array [
                      "unitLabel",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            />
          </div>,
        ],
        "className": "field-group is-invalid",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              undefined,
              <span
                className="field-required"
              >
                 *
              </span>,
            ],
            "className": "text-right",
            "htmlFor": "unitInput",
          },
          "ref": null,
          "rendered": Array [
            undefined,
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": " *",
                "className": "field-required",
              },
              "ref": null,
              "rendered": " *",
              "type": "span",
            },
          ],
          "type": "label",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div>
                children
              </div>,
              <FieldError
                error={null}
                id="unitInput_errors"
                invalid={true}
                stringFormatter={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        "unitLabel",
                      ],
                      Array [
                        "unitLabel",
                      ],
                      Array [
                        "unitLabel",
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                    ],
                  }
                }
              />,
            ],
            "className": "input-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "children",
              },
              "ref": null,
              "rendered": "children",
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "error": null,
                "id": "unitInput_errors",
                "invalid": true,
                "stringFormatter": [MockFunction] {
                  "calls": Array [
                    Array [
                      "unitLabel",
                    ],
                    Array [
                      "unitLabel",
                    ],
                    Array [
                      "unitLabel",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
